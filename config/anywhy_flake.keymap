#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        bt_sel_3 {
            bindings = <&bt3>;
            key-positions = <42 30>;
            layers = <2>;
        };

        bt_sel_4 {
            bindings = <&bt4>;
            key-positions = <30 18>;
            layers = <2>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <13 25>;
            layers = <3>;
        };

        layer1 {
            bindings = <&sl 1>;
            key-positions = <51 52>;
        };

        layer2 {
            bindings = <&sl 2>;
            key-positions = <53 54>;
        };

        ctrlc {
            bindings = <&kp LC(C)>;
            key-positions = <0 1>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <10 11>;
        };

        alttab {
            bindings = <&kp RG(TAB)>;
            key-positions = <46 47>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <36 37>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <48 49>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <49 50>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <48 49 50>;
        };
    };

    macros {
        bt_clr_0: bt_clr_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &bt BT_CLR>;
            label = "BT_CLR_0";
        };

        bt_clr_1: bt_clr_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &bt BT_CLR>;
            label = "BT_CLR_1";
        };

        bt_clr_2: bt_clr_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &bt BT_CLR>;
            label = "BT_CLR_2";
        };

        bt_clr_3: bt_clr_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3 &bt BT_CLR>;
            label = "BT_CLR_3";
        };

        bt_clr_4: bt_clr_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4 &bt BT_CLR>;
            label = "BT_CLR_4";
        };
    };

    behaviors {
        bt0: bt0 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT0";
            bindings = <&bt BT_SEL 0>, <&bt_clr_0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt1: bt1 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT1";
            bindings = <&bt BT_SEL 1>, <&bt_clr_1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt2: bt2 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT2";
            bindings = <&bt BT_SEL 2>, <&bt_clr_2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt3: bt3 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT3";
            bindings = <&bt BT_SEL 3>, <&bt_clr_3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt4: bt4 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT4";
            bindings = <&bt BT_SEL 4>, <&bt_clr_4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        autoshift: autoshift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        idletap: idletap {
            compatible = "zmk,behavior-hold-tap";
            label = "IDLETAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            require-prior-idle-ms = <300>;
            flavor = "tap-preferred";
        };

        thumbtap: thumbtap {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMBTAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <240>;
            quick-tap-ms = <100>;
            flavor = "balanced";
            hold-while-undecided;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&autoshift GRAVE ESCAPE     &autoshift LS(N1) N1  &autoshift LS(N2) N2  &autoshift LS(N3) N3                  &autoshift LS(N4) N4      &autoshift LS(N5) N5           &autoshift LS(N6) N6          &autoshift LS(N7) N7       &autoshift LS(N8) N8                    &autoshift N9 N9         &autoshift LS(N0) N0        &kp BACKSPACE
&autoshift LS(EQUAL) EQUAL  &kp Q                 &kp W                 &kp E                                 &kp R                     &kp T                          &kp Y                         &kp U                      &kp I                                   &kp O                    &kp P                       &autoshift LS(BACKSLASH) BACKSLASH
&autoshift LS(MINUS) MINUS  &kp A                 &kp S                 &kp D                                 &kp F                     &kp G                          &kp H                         &kp J                      &kp K                                   &kp L                    &autoshift LS(SEMI) SEMI    &autoshift LS(APOS) APOS
&sk LEFT_SHIFT              &kp Z                 &kp X                 &kp C                                 &kp V                     &kp B                          &kp N                         &kp M                      &autoshift LS(COMMA) COMMA              &autoshift LS(DOT) DOT   &autoshift LS(FSLH) FSLH    &sk RIGHT_SHIFT
                            &thumbtap LCTRL LEFT  &thumbtap LALT RIGHT  &autoshift LS(LEFT_BRACE) LEFT_BRACE  &thumbtap LEFT_SHIFT TAB  &idletap LEFT_GUI RS(SPACE)    &idletap RIGHT_GUI RS(SPACE)  &thumbtap RIGHT_SHIFT RET  &autoshift LS(RIGHT_BRACE) RIGHT_BRACE  &thumbtap LALT UP_ARROW  &thumbtap LCTRL DOWN_ARROW
            >;
        };

        num {
            bindings = <
&none  &none     &none          &none      &none      &none       &none      &none   &none   &none   &none      &none
&none  &kp ESC   &kp BACKSPACE  &kp TAB    &kp ENTER  &kp DEL     &kp GRAVE  &kp N7  &kp N8  &kp N9  &kp MINUS  &none
&none  &kp LGUI  &kp LALT       &kp LCTRL  &kp LSHFT  &kp LBKT    &kp EQUAL  &kp N4  &kp N5  &kp N6  &kp N0     &none
&none  &kp LEFT  &kp DOWN       &kp UP     &kp RIGHT  &kp RBKT    &kp SQT    &kp N1  &kp N2  &kp N3  &kp BSLH   &none
       &trans    &trans         &trans     &trans     &none       &none      &trans  &trans  &trans  &trans
            >;
        };

        fn {
            bindings = <
&none  &none    &none   &none   &none   &none             &none  &none       &none         &none         &none         &out OUT_TOG
&none  &kp F12  &kp F7  &kp F8  &kp F9  &soft_off         &bt2   &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_BRI_UP  &none
&none  &kp F10  &kp F4  &kp F5  &kp F6  &kp CAPS          &bt1   &kp RSHFT   &kp RCTRL     &kp RALT      &kp RGUI      &none
&none  &kp F11  &kp F1  &kp F2  &kp F3  &studio_unlock    &bt0   &kp C_PP    &kp C_PREV    &kp C_NEXT    &kp C_BRI_DN  &none
       &trans   &trans  &trans  &trans  &none             &none  &trans      &trans        &trans        &trans
            >;
        };
    };
};
